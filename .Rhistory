testing = adData[-inTrain,ilc]
# NO PCA model
model <- train(training$diagnosis ~ .,method="glm", data=training)
nopca <- predict(model,training)
nopca_CM <- confusionMatrix(training$diagnosis,nopca)
# Create PCA
preproc <- preProcess(training[,2:13],method="pca",thresh=0.8)
trainpc <- predict(preproc,training[,2:13])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainpc)
# test
testpc <- predict(preproc,testing[,2:13])
pc_CM <- confusionMatrix(testing$diagnosis,predict(modelFit,testpc))
nopca_CM
pc_CM
model_nopca <- train(training$diagnosis ~ .,method="glm", data=training)
# testing
cm_nopca <- confusionMatrix(model_nopca,testing$diagnosis)
model_nopca <- train(diagnosis ~ .,method="glm", data=training)
cm_nopca <- confusionMatrix(model_nopca,testing$diagnosis)
confusionMatrix(model_nopca,testing$diagnosis)
test_predict <- predict(model_nopca,testing)
cm_nopca <- confusionMatrix(test_predict,testing$diagnosis)
cm_nopca
# Create PCA
preproc <- preProcess(training[,2:13],method="pca",thresh=0.8)
trainpc <- predict(preproc,training[,2:13])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainpc)
# test
testpc <- predict(modelFit,testing[,2:13])
pc_CM <- confusionMatrix(testing$diagnosis,predict(modelFit,testpc))
preproc <- preProcess(training[,2:13],method="pca",thresh=0.8)
trainpc <- predict(preproc,training[,2:13])
modelFit <- train(training$diagnosis ~ ., method="glm", data=trainpc)
# test
testpc <- predict(preproc,testing[,2:13])
pc_CM <- confusionMatrix(testing$diagnosis,predict(modelFit,testpc))
pc_CM
dat <- read.table('C:\work\R-prog\MachineLearning\pml-training.csv')
dat <- read.table('C:\\work\\R-prog\\MachineLearning\\pml-training.csv')
str(dat)
View(dat)
rm(dat)
dat <- read.csv('C:\\work\\R-prog\\MachineLearning\\pml-training.csv')
View(dat)
summary(dat)
dim(dat)
names(dat)
head(dat$classe)
data(iris);library(ggplot2)
names(iris)
table(iris$Species)
inTrain <- createDataPartition(y=iris$Species,p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
library(caret)
modFit <- train(Species ~ .,method="rpart",data=training)
modFit
print modFit$finalModel
print(modFit$finalModel)
install.packages("rattle")
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
libary(rpart.plot)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
view(testing)
View(testing)
result = predit(modFit,testing)
result = predict(modFit,testing)
confusionMatrix(result,testing$Species)
hist(dat$num_window)
? grep
grep('%arm%',names(dat))
grep('*arm*',names(dat))
names(dat)[grep('*arm*',names(dat))]
names(dat)[grep('arm',names(dat))]
hist(dat$max_picth_arm)
hist(dat$min_picth_arm)
hist(dat$min_pitch_arm)
library(ggplot2)
ggplot(dat, aes(max_picth_arm)) + geom_histogram(fill=classe, color="black")
ggplot(dat, aes(max_picth_arm)) + geom_histogram(fill=classes, color="black")
ggplot(dat, aes(max_picth_arm)) + geom_histogram(fill=class, color="black")
hist(dat$class)
hist(count(dat$class)
)
summary(dat$class)
ggplot(dat, aes(max_picth_arm)) + geom_histogram(fill=class)
ggplot(dat,eas(x=num,y=max_picth_arm, colour=factor(class))) + geom_point()
ggplot(dat,aes(x=num,y=max_picth_arm, colour=factor(class))) + geom_point()
ggplot(dat,aes(x=num_window,y=max_picth_arm, colour=factor(class))) + geom_point()
names(dat)[grep('max',names(dat))]
names(dat)[grep('max_roll',names(dat))]
names(dat)[grep('max_roll',names(dat))] + c("class")
append(names(dat)[grep('max_roll',names(dat))],"class")
max_roll <- append(names(dat)[grep('max_roll',names(dat))],"class")
ggplot(dat[,max_roll], aes(x=max_roll_belt, fill=class)) + geom_histogram()
ggplot(dat, aes(x=max_roll_belt, fill=class)) + geom_histogram()
head(dat[,max_roll])
max_roll
str(max_roll)
head(dat[,append(names(dat)[grep('max_roll',names(dat))],"class")])
head(dat[,c("max_roll_belt")])
head(dat[,c("max_roll_arm")])
head(dat[,c("max_roll_dumbbell")])
head(dat[,c("max_roll_forearm")])
head(dat[,c("max_picth_forearm")])
head(dat[,c("max_yaw_forearm")])
sapply(dat,function(x)all(is.na(x)))
names(dat[,sapply(dat,function(x)all(is.na(x)))])
any(dat[,sapply(dat,function(x)all(is.na(x)))])
View(dat)
new_dat <- dat[dat$new_window = 'yes',]
new_dat <- dat[dat$new_window == 'yes',]
rm(new_dat)
rm(adData)
rm(inTrain)
rm(iris)
rm(predictors)
rm(testing)
rm(testpc)
rm(training)
rm(trainpc)
modtree <- train(class ~., method="rpart",data=dat)
correlationMatrix <- cor(dat)
predictors <-
names(dat)
predictors <- names(dat)[8:159]
correlationMatrix <- cor(dat[,8:159])
cor_dat <- dat[,8:159]
View(cor_dat)
correlationMatrix <- cor(cor_dat[,8:159])
correlationMatrix <- cor(cor_dat)
correlationMatrix <- cor(cor_dat, use="pairwise.complete.obs")
? cor
correlationMatrix <- cor(cor_dat, use="complete.obs")
str(cor_dat)
library(dplyr)
cor_dat <- apply(dat[,8:159],2,function(f)as.numeric(levels(f))[f])
str(cor_dat)
rm(cor_dat)
asNumeric <- function(x) as.numeric(as.character(x))
factorsNumeric <- function(d) modifyList(d, lapply(d[, sapply(d, is.factor)],
asNumeric))
f <- factorsNumeric(dat)
warnings()
f <- factorsNumeric(dat[,8:159])
f.dat <- data.frame(f)
str(f)
rm(f); rm(f.dat)
cor.dat <- sapply(dat[,8:159], function(f) as.numeric(as.character(f)))
View(cor.dat)
correlationMatrix <- cor(cor.dat, use="complete.obs")
correlationMatrix <- cor(cor.dat, use="pairwise.complete.obs")
head(correlationMatrix)
highly.cor <- findCorrelation(correlationMatrix, cutoff=0.75)
ok <- complete.cases(correlationMatrix)
ok
View(correlationMatrix)
cor.matrix <- correlationMatrix[,colSums(is.na(correlationMatrix))<nrow(df)]
View(cor.matrix)
rm(cor.matrix)
cm <- df(correlationMatrix)
cm <- data.frame(correlationMatrix)
cm.comp <- cm %>% filter(function(x)!all(is.na(x)))
!apply(is.na(cm),2,all)
cm.com <- cm[,!apply(is.na(cm),2,all)
]
cor.dat <- findCorrelation(cm.com,cutoff=0.75)
cm[is.na(cm)] <- 0
cor.dat <- findCorrelation(cm,cutoff=0.75)
cm <- dat
cm <- cor(cor.dat, use="pairwise.complete.obs")
cm <- cor(cor.dat, use="everything")
cm.high <- findCorrelation(cm,cutoff=0.75)
cm.nona <- cm
cm.nona[is.na(cm.nona)] <- 0
cm.high <- findCorrelation(cm,cutoff=0.75)
cm.high <- findCorrelation(cm.nona,cutoff=0.75)
print(cm.high)
names(dat)[cm.high]
my.prc <- prcomp(dat,center=T,scale=T)
screeplot(my.prc,type="line")
my.prc <- prcomp(dat,center=T,scale=T)
my.prc <- prcomp(cor.dat,center=T,scale=T)
dat.num <- sapply(dat[,8:159], function(f) as.numeric(as.character(f)))
View(dat.num)
my.prc <- prcomp(dat.num,center=T,scale=T)
my.prc <- preProcess(dat,method="pca")
my.prc <- preProcess(dat.num,method="pca")
rm(dat.num)
dat.var <- dat[,apply(dat,2,var,na.rm=TRUE)!=0]
dat.var <- dat[,apply(dat,2,var)!=0]
dat[,apply(dat,2,var)
]
RFmodel <- train(class~.,method="rf", data=train.set,prox=TRUE)
data(iris); library(ggplot2)
data(iris); library(ggplot2)
inTrain <- createDataPartition(y=iris$Species,
p=0.7, list=FALSE)
install.packages(c("BH", "caret", "coda", "colorspace", "DBI", "descr", "devtools", "digest", "dplyr", "evaluate", "formatR", "Formula", "gdata", "ggmap", "ggplot2", "gtools", "highr", "Hmisc", "httr", "jsonlite", "KernSmooth", "knitr", "Lahman", "lattice", "lazyeval", "magrittr", "manipulate", "markdown", "mime", "MSBVAR", "pgmm", "plotmo", "plyr", "quantmod", "R6", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "RgoogleMaps", "rjson", "rmarkdown", "ROAuth", "RODBC", "RSQLite", "rstudioapi", "sqldf", "stringr", "swirl", "testthat", "tidyr", "zoo"))
install.packages(c("BH", "caret", "coda", "colorspace", "DBI",
install.packages(c("BH", "caret", "coda", "colorspace", "DBI", "descr", "devtools", "digest", "dplyr", "evaluate", "formatR", "Formula", "gdata", "ggmap", "ggplot2", "gtools", "highr", "Hmisc", "httr", "jsonlite", "KernSmooth", "knitr", "Lahman", "lattice", "lazyeval", "magrittr", "manipulate", "markdown", "mime", "MSBVAR", "pgmm", "plotmo", "plyr", "quantmod", "R6", "RColorBrewer", "Rcpp", "RcppArmadillo", "RCurl", "reshape2", "RgoogleMaps", "rjson", "rmarkdown", "ROAuth", "RODBC", "RSQLite", "rstudioapi", "sqldf", "stringr", "swirl", "testthat", "tidyr", "zoo"))
require(graphics)
spec.ar(lh)
spec.ar(ldeaths)
spec.ar(ldeaths, method = "burg")
spec.ar(log(lynx))
spec.ar(log(lynx), method = "burg", add = TRUE, col = "purple")
spec.ar(log(lynx), method = "mle", add = TRUE, col = "forest green")
spec.ar(log(lynx), method = "ols", add = TRUE, col = "blue")
str(lh)
library(quantmod)
from.dat <- as.Date('1/1/2015', format = "%m/%d/%y")
from.dat
from.dat <- as.Date('1/1/2015', format = "%m/%d/%Y")
to.dat <- as.Date('5/1/2015', format = "%m/%d/%Y")
getSymbols("SPY", src="google", from=from.dat, to=to.dat)
head(SPY)
str(SPY)
qnorm(0.95)
install_version("stringr",version="0.6.2", type="source")
library(devtools)
install_version("stringr",version="0.6.2", type="source")
install.packages("C:/Users/acuenca/Downloads/stringr_0.6.2.tar.gz",repos=NULL,type="source")
setwd("C:/work/R-prog/slidify")
library(slidify)
author("ProjectPres")
library(ISLR)
slidify("index.Rmd")
setwd("C:/work/R-prog/slidify")
library(slidify)
setwd("C:/work/R-prog/slidify/ProjectPres")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
library(ISLR)
data(Auto)
Summary(Auto)
summary(Auto)
unique(Auto$year)
unique(Auto$name)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
data(mtcars)
str(mtcars)
summary(Auto)
str(Auto)
pairs(Auto)
plot(x=Auto$acceleration,y=Auto$horsepower)
plot(x=Auto$acceleration,y=Auto$displacement)
plot(x=Auto$acceleration,y=Auto$weight)
par(mfrow=c(1,3))
plot(x=Auto$acceleration,y=Auto$horsepower)
plot(x=Auto$acceleration,y=Auto$displacement)
plot(x=Auto$acceleration,y=Auto$weight)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(randomForest)
library(dplyr)
library(ISLR)
data(Auto)
d <- Auto
d$cylinders <- as.factor(d$cylinders)
trainctrl <- trainControl(method="cv", number=10)
trix <- createDataPartition(d$acceleration, p=0.9,list=F)
set.ts <- d[-trix,]
set.tr <- d[trix,]
library(caret)
trainctrl <- trainControl(method="cv", number=10)
trix <- createDataPartition(d$acceleration, p=0.9,list=F)
set.ts <- d[-trix,]
set.tr <- d[trix,]
set.seed(12345)
fit.rf <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="rf",
trControl=trainctrl,
verbose=F)
print(fit.rf)
ls(fit.rf)
fit.rf$resample
fit.rf$bestTune
fit.rf$resample
fit.rf$results
preproc.tr <- preProcess(set.tr,method=c("center","scale"))
fit.bglm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="bayesglm",
trControl=trainctrl,
preproc
verbose=F)
fit.bglm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="bayesglm",
trControl=trainctrl,
verbose=F)
fit.bglm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="bayesglm",
#trControl=trainctrl,
verbose=F)
fit.bglm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="lm",
#trControl=trainctrl,
verbose=F)
ls(fit.bglm)
fit.bglm$results
fit.lm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="lm",
trControl=trainctrl,
verbose=F)
fit.lm$results
rm(fit.bglm)
fit.gam <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="gam",
trControl=trainctrl,
verbose=F)
fit.gam$results
fit.rf$results
fit.gbm <- train(acceleration ~ horsepower +
displacement +
weight +
cylinders,
data=set.tr,
method="gbm",
trControl=trainctrl,
verbose=F)
unload(dplyr)
detach(dplyr)
detach("dplyr")
detach("package:dplyr",unload=T)
detach("package:plyr",unload=T)
fit.gbm$results
fit.gbm$results %>% filter(min(RMSE))
library(dplyr)
fit.gbm$results %>% filter(min(RMSE))
fit.gbm$results %>% filter(min(RMSE)=RMSE)
fit.gbm$results %>% filter(min(RMSE)==RMSE)
fit.gbm$results %>% filter(min(RMSE)==RMSE) %>% select(RMSE,Rsquared,RMSESD,RsquaredSD)
fit.rf$results %>% filter(min(RMSE)==RMSE) %>% select(RMSE,Rsquared,RMSESD,RsquaredSD)
slidify("index.Rmd")
fit.rf$results %>% filter(min(RMSE)==RMSE) %>% select(RMSE,Rsquared,RMSESD,RsquaredSD)
r <- fit.rf$results %>% filter(min(RMSE)==RMSE) %>% select(RMSE,Rsquared,RMSESD,RsquaredSD)
r
r$RMSE
print(r$RMSE)
write(r$RMSE,"")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
r.rf
r.rf
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
err.tbl <- cbind(r.rf,r.gbm,r.gam)
err.tbl
err.tbl <- rbind(r.rf,r.gbm,r.gam)
err.tbl
err.tbl <- rownames("rf","gbm","gam")
err.tbl <- rownames(c("rf","gbm","gam"))
err.tbl
err.tbl <- rbind(r.rf,r.gbm,r.gam)
err.tbl <- rbind(c("rf","gbm","gam",r.rf,r.gbm,r.gam)
)
err.tbl
err.tbl <- rbind(c("rf","gbm","gam"),r.rf,r.gbm,r.gam)
err.tbl
err.tbl <- rbind(r.rf,r.gbm,r.gam)
err.tbl <- cbind(c("rf","gbm","gam"),err.tbl)
err.tbl
err.tbl <- cbind(Model=c("rf","gbm","gam"),err.tbl)
err.tbl
err.tbl <- rbind(r.rf,r.gbm,r.gam)
err.tbl <- cbind(Model=c("rf","gbm","gam"),err.tbl)
err.tbl
library(knitr)
kable(err.tbl,format="markdown", caption="Sample Error Rates")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
library(xtable)
slidify("index.Rmd")
slidify("index.Rmd")
t <-xtable(err.tbl, caption="Sample Error Rates", digits=4, html.table.attribute='class:ErrRateTbl')
print(t)
print(t,type="html",html.table.attribute="class:ErrRateTbl")
print(t,type="html",html.table.attribute='class=ErrRateTbl')
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
err.disp <- xtable(err.tbl, caption="Sample Error Rates", digits=4,align=repl("center",6))
print(err.disp,type="html"
, html.table.attribute='class=ErrRateTbl'
,include.rownames=F
)
?repeat()
?repl
repeat("center",6)
rep("center",6)
err.disp <- xtable(err.tbl, caption="Sample Error Rates", digits=4,align=rep("center",6))
print(err.disp,type="html"
, html.table.attribute='class=ErrRateTbl'
,include.rownames=F
)
slidify("index.Rmd")
slidify("index.Rmd")
c("left",rep("center",6))
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
shiny::runApp('C:/work/R-prog/DataProducts/App')
